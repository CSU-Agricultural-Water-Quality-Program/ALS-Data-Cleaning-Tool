markerColor = "orange",
library = "fa"
)
)
Steamboat %>%
leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "World Topo Map") %>%
addLayersControl(baseGroups = c("World Topo Map", "World Imagery")) %>%
addAwesomeMarkers(label = ~Steamboat$Site,
labelOptions = labelOptions(textOnly = TRUE, textsize =  12),
popup = ~htmlEscape(Steamboat$Popup),
icon = ~ logos[ticker]) %>%
setView(lat = 40.263076, lng = -106.860446, zoom = 11) %>%
addScaleBar(
position = "topright",
scaleBarOptions(
maxWidth = 200,
metric = TRUE,
imperial = TRUE,
updateWhenIdle = TRUE))
Steamboat <- read.csv("~/AWQP/Steamboat_points.csv")
logos <- awesomeIconList(
"FB" = makeAwesomeIcon(
icon = "facebook",
markerColor = "blue",
library = "fa"
),
"AAPL" = makeAwesomeIcon(
icon = "apple",
markerColor = "green",
library = "fa"
),
"NFLX" = makeAwesomeIcon(
icon = "tv",
markerColor = "red",
library = "fa"
),
"GOOG" = makeAwesomeIcon(
icon = "google",
markerColor = "orange",
library = "fa"
)
)
Steamboat %>%
leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "World Topo Map") %>%
addLayersControl(baseGroups = c("World Topo Map", "World Imagery")) %>%
addAwesomeMarkers(label = ~Steamboat$Site,
labelOptions = labelOptions(textOnly = TRUE, textsize =  12),
popup = ~htmlEscape(Steamboat$Popup),
icon = ~ logos[ticker]) %>%
setView(lat = 40.263076, lng = -106.860446, zoom = 11) %>%
addScaleBar(
position = "topright",
scaleBarOptions(
maxWidth = 200,
metric = TRUE,
imperial = TRUE,
updateWhenIdle = TRUE))
library(magrittr)
library(dplyr)
library(readr)
library(readxl)
library(tidyr)
library(plotly)
library(ggplot2)
library(tmap)
library(leaflet)
library(sf)
library(htmltools)
directory = '~/GitHub/ALS-Data-Cleaning-Tool/Example Data'
setwd(directory)
# import xls files and merge into single df
df <- list.files(path=directory) %>%
lapply(read_xls) %>%
bind_rows
df$IndTestName = gsub(" ", "_", df$IndTestName)
# Create Inflow/outflow/other source column based on Field ID
df$source = ifelse(grepl('IN', df$FieldID), 'Inflow',
ifelse(grepl('UYM', df$FieldID), 'Outflow',
ifelse(grepl('OT', df$FieldID),'Outflow',
ifelse(grepl('LABQC', df$FieldID),'LABQC', 'Other'))))
# Create location column based on FieldID
df$location = ifelse(grepl('SCI',df$FieldID), 'Stagecoach_In',
ifelse(grepl('SCA', df$FieldID),'Stagecoach_Above',
ifelse(grepl('00', df$FieldID),'Stagecoach_Install',
ifelse(grepl('TR', df$FieldID),'Todds_Ranch',
ifelse(grepl('SB-L', df$FieldID),'Legacy_Ranch',
ifelse(grepl('Y', df$FieldID), 'Upper_Yampa',
ifelse(grepl('SCO', df$FieldID), 'Stagecoach_Out', NA)))))))
# Create sample type column base on FieldID
df$type = ifelse(grepl('GB',df$FieldID), 'Grab',
ifelse(grepl('LC', df$FieldID),'Low_cost',
ifelse(grepl('ISC', df$FieldID), 'ISCO',
ifelse(grepl('DB', df$FieldID), 'Grab', NA))))
# Important Graphs
# Goal 1: Get rid of bullshit columns
# Goal 2: Make important graphs for each location illustrating inflow v. outflow
# Nitrate, Total P, Ortho-P on same graph for example, selenium on separate due to units
# Pro-tip: don't do it at 3am :)
# Pro-tip: if ggplot is sucking b/c your df is too big, then consider dropping unneeded rows to simplify
# e.g., drop all rows with locations other than the ones you're using
SB <- df %>%
select(c(FieldID, IndTestName, FinalResult, location, type, source )) %>%
na.omit()
SB2 <- SB %>%
subset(SB$IndTestName == 'TOTAL_PHOSPHORUS')
SB3 <- SB2 %>%
subset(SB2$location == c('Upper_Yampa','Legacy_Ranch'))
test <-  ggplot(SB3, aes(x = source, y = FinalResult, fill = source))+
geom_bar(stat = 'identity')+
facet_wrap(~location)+
labs(x = '', y = 'Total Phosphorus (mg/L)',
title = 'Water Quality Analysis for Yampa River Valley')+
theme_bw()
test
SB2 <- SB %>%
subset(SB$IndTestName == 'TOTAL_PHOSPHORUS')
SB3 <- SB2 %>%
subset(SB2$location == c('Upper_Yampa','Legacy_Ranch'))
test <-  ggplot(SB3, aes(x = source, y = FinalResult, fill = source))+
geom_bar(stat = 'identity')+
facet_wrap(~location)+
labs(x = '', y = 'Total Phosphorus (mg/L)',
title = 'Water Quality Analysis for Yampa River Valley')+
theme_bw()
test
SB2 <- SB %>%
subset(SB$IndTestName == 'TOTAL_PHOSPHORUS')
SB3 <- SB2 %>%
subset(SB2$location == c('Upper_Yampa','Legacy_Ranch'))
test1 <-  ggplot(SB3, aes(x = source, y = FinalResult, fill = source))+
geom_bar(stat = 'identity')+
facet_wrap(~location)+
labs(x = '', y = 'Total Phosphorus (mg/L)',
title = 'Water Quality Analysis for Yampa River Valley')+
theme_bw()
ggplotly(test1)
SB2 <- SB %>%
subset(SB$IndTestName == 'TOTAL_PHOSPHORUS')
SB3 <- SB2 %>%
subset(SB2$location == c('Upper_Yampa','Legacy_Ranch'))
test1 <-  ggplot(SB3, aes(x = source, y = FinalResult, fill = source))+
geom_bar(stat = 'identity')+
facet_wrap(~location)+
labs(x = '', y = 'Total Phosphorus (mg/L)',
title = 'Water Quality Analysis for Yampa River Valley')+
theme_bw()
test1
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(readr)
library(readxl)
library(tidyr)
library(plotly)
library(ggplot2)
directory = '~/GitHub/ALS-Data-Cleaning-Tool/Example Data'
setwd(directory)
# import xls files and merge into single df
df <- list.files(path=directory) %>%
lapply(read_xls) %>%
bind_rows
df$IndTestName = gsub(" ", "_", df$IndTestName)
# Create Inflow/outflow/other source column based on Field ID
df$source = ifelse(grepl('IN', df$FieldID), 'Inflow',
ifelse(grepl('UYM', df$FieldID), 'Outflow',
ifelse(grepl('OT', df$FieldID),'Outflow',
ifelse(grepl('LABQC', df$FieldID),'LABQC', 'Other'))))
# Create location column based on FieldID
df$location = ifelse(grepl('SCI',df$FieldID), 'Stagecoach_In',
ifelse(grepl('SCA', df$FieldID),'Stagecoach_Above',
ifelse(grepl('00', df$FieldID),'Stagecoach_Install',
ifelse(grepl('TR', df$FieldID),'Todds_Ranch',
ifelse(grepl('SB-L', df$FieldID),'Legacy_Ranch',
ifelse(grepl('Y', df$FieldID), 'Upper_Yampa',
ifelse(grepl('SCO', df$FieldID), 'Stagecoach_Out', NA)))))))
# Create sample type column base on FieldID
df$type = ifelse(grepl('GB',df$FieldID), 'Grab',
ifelse(grepl('LC', df$FieldID),'Low_cost',
ifelse(grepl('ISC', df$FieldID), 'ISCO',
ifelse(grepl('DB', df$FieldID), 'Grab', NA))))
# Important Graphs
# Goal 1: Get rid of bullshit columns
# Goal 2: Make important graphs for each location illustrating inflow v. outflow
# Nitrate, Total P, Ortho-P on same graph for example, selenium on separate due to units
# Pro-tip: don't do it at 3am :)
# Pro-tip: if ggplot is sucking b/c your df is too big, then consider dropping unneeded rows to simplify
# e.g., drop all rows with locations other than the ones you're using
SB <- df %>%
select(c(FieldID, IndTestName, FinalResult, location, type, source )) %>%
na.omit()
SB2 <- SB %>%
subset(SB$IndTestName == 'TOTAL_PHOSPHORUS')
SB3 <- SB2 %>%
subset(SB2$location == c('Upper_Yampa','Legacy_Ranch'))
test1 <-  ggplot(SB3, aes(x = source, y = FinalResult, fill = source))+
geom_bar(stat = 'identity')+
facet_wrap(~location)+
labs(x = '', y = 'Total Phosphorus (mg/L)',
title = 'Water Quality Analysis for Yampa River Valley')+
theme_bw()
test1
SBt <- SB %>%
subset(SB$IndTestName == 'TOTAL_PHOSPHORUS')
SB2t <- SBt %>%
subset(SBt$location == c('Upper_Yampa', 'Legacy_Ranch'))
test <- ggplot(SB2t, aes(x = source, y = FinalResult, fill = source)) +
geom_bar(stat = 'identity') +
facet_wrap(~location) +
labs(x = "", y = 'Total Phosphorus (mg/L)',
title = "water Quality Analysis for Yampa River Valley") +
theme_bw()
test
SB2 <- SB %>%
subset(SB$IndTestName == 'TOTAL_PHOSPHORUS')
SB3 <- SB2 %>%
subset(SB2$location == c('Legacy_Ranch','Upper_Yampa'))
test1 <-  ggplot(SB3, aes(x = source, y = FinalResult, fill = source))+
geom_bar(stat = 'identity')+
facet_wrap(~location)+
labs(x = '', y = 'Total Phosphorus (mg/L)',
title = 'Water Quality Analysis for Yampa River Valley')+
theme_bw()
test1
SB2 <- SB %>%
subset(SB$IndTestName == 'TOTAL_PHOSPHORUS')
SB3 <- SB2 %>%
subset(SB2$location == c('Upper_Yampa','Legacy_Ranch'))
test1 <-  ggplot(SB3, aes(x = source, y = FinalResult, fill = source))+
geom_bar(stat = 'identity')+
facet_wrap(~location)+
labs(x = '', y = 'Total Phosphorus (mg/L)',
title = 'Water Quality Analysis for Yampa River Valley')+
theme_bw()
test1
Steamboat %>%
leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "World Topo Map") %>%
addLayersControl(baseGroups = c("World Topo Map", "World Imagery")) %>%
addMarkers(label = ~Steamboat$Site,
labelOptions = labelOptions(textOnly = TRUE, textsize =  12),
popup = ~htmlEscape(Steamboat$Popup)) %>%
setView(lat = 40.263076, lng = -106.860446, zoom = 11) %>%
addScaleBar(
position = "topright",
scaleBarOptions(
maxWidth = 200,
metric = TRUE,
imperial = TRUE,
updateWhenIdle = TRUE))
SB2 <- SB %>%
subset(SB$IndTestName == 'TOTAL_PHOSPHORUS')
SB3 <- SB2 %>%
subset(SB2$location == c('Upper_Yampa','Legacy_Ranch'))
test <-  ggplot(SB3, aes(x = source, y = FinalResult, fill = source))+
geom_bar(stat = 'identity')+
facet_wrap(~location)+
labs(x = '', y = 'Total Phosphorus (mg/L)',
title = 'Water Quality Analysis for Yampa River Valley')+
theme_bw()
test
directory = '~/GitHub/ALS-Data-Cleaning-Tool/Example Data'
setwd(directory)
# import xls files and merge into single df
df <- list.files(path=directory) %>%
lapply(read_xls) %>%
bind_rows %>%
mutate(FinalResult = as.numeric(FinalResult))
df$IndTestName = gsub(" ", "_", df$IndTestName)
# Create Inflow/outflow/other source column based on Field ID
df$source = ifelse(grepl('IN', df$FieldID), 'Inflow',
ifelse(grepl('UYM', df$FieldID), 'Outflow',
ifelse(grepl('OT', df$FieldID),'Outflow',
ifelse(grepl('LABQC', df$FieldID),'LABQC', 'Other'))))
# Create location column based on FieldID
df$location = ifelse(grepl('SCI',df$FieldID), 'Stagecoach_In',
ifelse(grepl('SCA', df$FieldID),'Stagecoach_Above',
ifelse(grepl('00', df$FieldID),'Stagecoach_Install',
ifelse(grepl('TR', df$FieldID),'Todds_Ranch',
ifelse(grepl('SB-L', df$FieldID),'Legacy_Ranch',
ifelse(grepl('Y', df$FieldID), 'Upper_Yampa',
ifelse(grepl('SCO', df$FieldID), 'Stagecoach_Out', NA)))))))
# Create sample type column base on FieldID
df$type = ifelse(grepl('GB',df$FieldID), 'Grab',
ifelse(grepl('LC', df$FieldID),'Low_cost',
ifelse(grepl('ISC', df$FieldID), 'ISCO',
ifelse(grepl('DB', df$FieldID), 'Grab', NA))))
# Important Graphs
# Goal 1: Get rid of bullshit columns
# Goal 2: Make important graphs for each location illustrating inflow v. outflow
# Nitrate, Total P, Ortho-P on same graph for example, selenium on separate due to units
# Pro-tip: don't do it at 3am :)
# Pro-tip: if ggplot is sucking b/c your df is too big, then consider dropping unneeded rows to simplify
# e.g., drop all rows with locations other than the ones you're using
SB <- df %>%
select(c(FieldID, IndTestName, FinalResult, location, type, source )) %>%
na.omit()
library(tmap)
library(leaflet)
library(sf)
library(htmltools)
library(magrittr)
library(dplyr)
library(readr)
library(readxl)
library(tidyr)
library(plotly)
library(ggplot2)
install.packages('sp')
library(sp)
knitr::opts_chunk$set(echo = TRUE)
library(tmap)
library(leaflet)
library(sf)
library(htmltools)
library(magrittr)
library(dplyr)
library(readr)
library(readxl)
library(tidyr)
library(plotly)
library(ggplot2)
install.packages('ion')
library(tmap)
library(leaflet)
library(sf)
library(htmltools)
library(magrittr)
library(dplyr)
library(readr)
library(readxl)
library(tidyr)
library(plotly)
library(ggplot2)
install.packages('fa')
library(tmap)
library(leaflet)
library(sf)
library(htmltools)
library(magrittr)
library(dplyr)
library(readr)
library(readxl)
library(tidyr)
library(plotly)
library(ggplot2)
install.packages('glyphicon')
library(tmap)
library(leaflet)
library(sf)
library(htmltools)
library(magrittr)
library(dplyr)
library(readr)
library(readxl)
library(tidyr)
library(plotly)
library(ggplot2)
install.packages('fa')
install.packages("ionr")
library(tmap)
library(leaflet)
library(sf)
library(htmltools)
library(magrittr)
library(dplyr)
library(readr)
library(readxl)
library(tidyr)
library(plotly)
library(ggplot2)
library(ionr)
Steamboat <- read.csv("~/AWQP/Steamboat_points.csv")
getColor <- function(Steamboat) {
sapply(Steamboat$lat, function(lat) {
if(lat == 40.268871:40.290183) {
"green"
} else if(lat == 40.429366) {
"orange"
} else if (lat <= 40.197434){
"red"
}
})
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
markerColor = getColor(Steamboat)
)
Steamboat %>%
leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "World Topo Map") %>%
addLayersControl(baseGroups = c("World Topo Map", "World Imagery")) %>%
addAwesomeMarkers(label = ~Steamboat$Site, icon = icons,
labelOptions = labelOptions(textOnly = TRUE, textsize =  12),
popup = ~htmlEscape(Steamboat$Popup)) %>%
setView(lat = 40.263076, lng = -106.860446, zoom = 11) %>%
addScaleBar(
position = "topright",
scaleBarOptions(
maxWidth = 200,
metric = TRUE,
imperial = TRUE,
updateWhenIdle = TRUE))
Steamboat <- read.csv("~/AWQP/Steamboat_points.csv")
getColor <- function(Steamboat) {
sapply(Steamboat$lat, function(lat) {
if(lat >= 40.268871) {
"green"
} else if(lat == 40.429366) {
"orange"
} else if (lat <= 40.197434){
"red"
}
})
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
markerColor = getColor(Steamboat)
)
Steamboat %>%
leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "World Topo Map") %>%
addLayersControl(baseGroups = c("World Topo Map", "World Imagery")) %>%
addAwesomeMarkers(label = ~Steamboat$Site, icon = icons,
labelOptions = labelOptions(textOnly = TRUE, textsize =  12),
popup = ~htmlEscape(Steamboat$Popup)) %>%
setView(lat = 40.263076, lng = -106.860446, zoom = 11) %>%
addScaleBar(
position = "topright",
scaleBarOptions(
maxWidth = 200,
metric = TRUE,
imperial = TRUE,
updateWhenIdle = TRUE))
library(tmap)
library(leaflet)
library(sf)
library(htmltools)
library(magrittr)
library(dplyr)
library(readr)
library(readxl)
library(tidyr)
library(plotly)
library(ggplot2)
library(ionr)
library(sf)
library(osmdata)
library(tmap)
library(leaflet)
library(sf)
library(htmltools)
library(magrittr)
library(dplyr)
library(readr)
library(readxl)
library(tidyr)
library(plotly)
library(ggplot2)
library(ionr)
library(sf)
intsall.packages('osmdata')
library(tmap)
library(leaflet)
library(sf)
library(htmltools)
library(magrittr)
library(dplyr)
library(readr)
library(readxl)
library(tidyr)
library(plotly)
library(ggplot2)
library(ionr)
library(sf)
install.packages('osmdata')
install.packages("osmdata")
install.packages("osmdata")
install.packages("osmdata")
install.packages("osmdata")
knitr::opts_chunk$set(echo = TRUE)
library(tmap)
library(leaflet)
library(sf)
library(htmltools)
library(magrittr)
library(dplyr)
library(readr)
library(readxl)
library(tidyr)
library(plotly)
library(ggplot2)
library(ionr)
library(sf)
library(osmdata)
fig <- SB3 %>%
plot_ly(
type = 'bar',
x = ~source,
y = ~FinalResult,
color = ~source) %>%
add_trace(hoverinfo = 'y')
fig
View(icons)
