library(dplyr)
library(ggplot2)
library(tidyr)
library(GGally)
loc = 'AVRC STAR'
# Uploading file-merge code to create data frame
source('./Code/file-merger.R')
# create data frame
dat <- returnAllFiles(d = directory, export = FALSE)
# make columns lowercase so they are all the same case
colnames(dat) <- tolower(names(dat))
filtered_data <- dat %>%
dplyr::filter(location.name == loc) %>%
dplyr::mutate(sample.id = sub("-[1-5]$", "", sample.id),  # Remove "-1", "-2", "-3", "-4", "-5" from sample.id
sample.id = sub("-[1-5]-D$", "-D", sample.id)) %>%  # Replace "-1-D", "-2-D", "-3-D", "-4-D", "-5-D" with "-D"
dplyr::select(sample.id, result, analyte, event.type)
View(dat)
View(dat)
View(filtered_data)
View(filtered_data)
# Pivot the data wider
pivoted_data <- filtered_data %>%
pivot_wider(names_from = analyte, values_from = result)
View(pivoted_data)
View(pivoted_data)
create_scatterplot_matrix(dat, loc)
View(iris)
ggpairs(iris)
ggpairs(pivoted_data)
length(names(pivoted_data))
ggpairs(pivoted_data,
columns = 1:length(names(pivoted_data)),
ggplot2::aes(colour = event.type))
ggpairs(pivoted_data,
columns = 3:length(names(pivoted_data)),
ggplot2::aes(colour = event.type))
ggpairs(pivoted_data,
columns = 3:length(names(pivoted_data)),
ggplot2::aes(colour = event.type)),
ggpairs(pivoted_data,
columns = 3:length(names(pivoted_data)),
ggplot2::aes(colour = event.type),
na.rm = T
)
data(flea)
View(data(flea))
d = data(flea)
d
flea
# drop ID column?
pd2 <- subset(pivoted_data, select = -c(sample.id)
# drop ID column?
pd2 <- subset(pivoted_data, select = -c(sample.id))
View(pd2)
View(pd2)
ggpairs(pd2,
columns = 3:length(names(pivoted_data)),
ggplot2::aes(colour = event.type),
na.rm = T
)
ggpairs(pd2,
columns = 2:length(names(pd2)),
ggplot2::aes(colour = event.type),
na.rm = T
)
library(plotly)
pairs(pd2)
pairs(~ ., data = pd2)
# drop ID column?
pd2 <- subset(pivoted_data, select = -c(sample.id, event.type))
pairs(~ ., data = pd2)
pairs(pd2)
pairs(pd2
col = event.type
pairs(pd2,
col = event.type
)
pairs(pd2,
col = 'blue',
pch = 8
)
pairs(pd2,
col = 'blue',
pch = 8,
main = 'Scatterplot Matrix of All Water Analytes'
)
cor(pd2)
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
chart.Correlation(pd2)
chart.Correlation(pd2,
histogram = T,
method = 'pearson')
chart.Correlation(pd2,
histogram = T,
method = 'pearson',
pch = 8)
pairs(pd2,
col = 'blue',
pch = 8,
main = 'Scatterplot Matrix of All Water Analytes'
)
chart.Correlation(pd2,
histogram = T,
method = 'pearson',
pch = 8
)
knitr::opts_chunk$set(echo = FALSE)
# set working dir
knitr::opts_knit$set(root.dir = here::here())
# sets the working directory to where the project file is
# load required packages
package.list <- c('plotly',
'dplyr',
'tidyr',
'ggplot2',
'gridExtra',
'GGally',
'PerformanceAnalytics'
)
packageLoad <- function(packages){
for (i in packages) {
if (!require(i, character.only = TRUE)) {
install.packages(i)
library(i, character.only = TRUE)
}
}
}
packageLoad(package.list)
# Uploading file-merge code to create data frame
source('./Code/file-merger.R')
# create data frame
dat <- returnAllFiles(d = directory, export = FALSE)
# make columns lowercase so they are all the same case
colnames(dat) <- tolower(names(dat))
# Site list
# To select site, un-comment your location of interest (alphabetical order)
# This list may need to be updated as more sites are added/removed
# loc = 'ARDEC 2200'
loc = 'AVRC STAR'
# loc = 'Barley'
# loc = 'Berthoud'
# loc = 'Big Hollow'
# loc = 'Boulder Lake'
# loc = 'Below Stagecoach Dam'
# loc = 'Gunnison'
# loc = 'Kerbel'
# loc = 'Legacy'
# loc = 'Molina'
# loc = 'Morrison Creek'
# loc = 'Stage Coach Above'
# loc = 'Stage Coach In'
# loc = 'Stagecoach'
# loc = 'The Ranch'
# loc = 'Upper Yampa'
# loc = 'Yellow Jacket'
# Site list
# To select site, un-comment your location of interest (alphabetical order)
# This list may need to be updated as more sites are added/removed
# loc = 'ARDEC 2200'
loc = 'AVRC STAR'
# loc = 'Barley'
# loc = 'Berthoud'
# loc = 'Big Hollow'
# loc = 'Boulder Lake'
# loc = 'Below Stagecoach Dam'
# loc = 'Gunnison'
# loc = 'Kerbel'
# loc = 'Legacy'
# loc = 'Molina'
# loc = 'Morrison Creek'
# loc = 'Stage Coach Above'
# loc = 'Stage Coach In'
# loc = 'Stagecoach'
# loc = 'The Ranch'
# loc = 'Upper Yampa'
# loc = 'Yellow Jacket'
print('Location Selected: ')
print(loc)
# Site list
# To select site, un-comment your location of interest (alphabetical order)
# This list may need to be updated as more sites are added/removed
# loc = 'ARDEC 2200'
loc = 'AVRC STAR'
# loc = 'Barley'
# loc = 'Berthoud'
# loc = 'Big Hollow'
# loc = 'Boulder Lake'
# loc = 'Below Stagecoach Dam'
# loc = 'Gunnison'
# loc = 'Kerbel'
# loc = 'Legacy'
# loc = 'Molina'
# loc = 'Morrison Creek'
# loc = 'Stage Coach Above'
# loc = 'Stage Coach In'
# loc = 'Stagecoach'
# loc = 'The Ranch'
# loc = 'Upper Yampa'
# loc = 'Yellow Jacket'
print('Location Selected: ', loc)
# Site list
# To select site, un-comment your location of interest (alphabetical order)
# This list may need to be updated as more sites are added/removed
# loc = 'ARDEC 2200'
loc = 'AVRC STAR'
# loc = 'Barley'
# loc = 'Berthoud'
# loc = 'Big Hollow'
# loc = 'Boulder Lake'
# loc = 'Below Stagecoach Dam'
# loc = 'Gunnison'
# loc = 'Kerbel'
# loc = 'Legacy'
# loc = 'Molina'
# loc = 'Morrison Creek'
# loc = 'Stage Coach Above'
# loc = 'Stage Coach In'
# loc = 'Stagecoach'
# loc = 'The Ranch'
# loc = 'Upper Yampa'
# loc = 'Yellow Jacket'
print('Location Selected: ')
print(loc)
# function to save site data as csv
csv_data <- function(dat, location_name) {
location_data <- dat %>%
filter(location.name == location_name)
#create output folder
folder_name <- "site_selector_temporary_results"
if (!file.exists(folder_name)) {
dir.create(folder_name)
}
file_name <- paste0(folder_name, "/", location_name, "_data_", format(Sys.Date(), "%Y-%m-%d"), ".csv")
write.csv(location_data, file = file_name, row.names = FALSE)
}
# use the function to save
csv_data(dat, loc)
# plotly Violin plot with dropdown
create_violin_plot <- function(df, selected_location) {
y_axis_var_names <- unique(df$analyte)
event_colors <- c("Inflow" = "#E69F00", "Outflow" = "#56B4E9", "Point Sample" = "#009E73")
create_buttons <- function(df, y_axis_var_name, selected_location) {
list(
method = 'restyle',
args = list('y', list(df[df$analyte == y_axis_var_name & df$location.name == selected_location, "result"])),
label = sprintf('Show %s', y_axis_var_name)
)
}
location_violin_plot <- plot_ly(df, x = ~event.type,
y = ~result,
color = ~event.type,
colors = event_colors,
type = 'violin', box = list(
visible = T
),
meanline = list(
visible = T
)) %>%
layout(
title = paste("Violin plots for Location:", selected_location),
xaxis = list(title = "Collected", tickformat = "%y-%m-%d"),
yaxis = list(title = "Result"),
showlegend = TRUE,
updatemenus = list(
list(
buttons = lapply(y_axis_var_names, create_buttons, df = df, selected_location = selected_location)
)
))
return(location_violin_plot)
}
create_violin_plot(dat, loc)
create_scatterplot_matrix <- function(data, location_name) {
filtered_data <- data %>%
filter(location.name == location_name) %>%
mutate(sample.id = sub("-[1-5]$", "", sample.id),  # Remove "-1", "-2", "-3", "-4", "-5" from sample.id
sample.id = sub("-[1-5]-D$", "-D", sample.id)) %>%  # Replace "-1-D", "-2-D", "-3-D", "-4-D", "-5-D" with "-D"
select(sample.id, result, analyte, event.type)
# Pivot the data wider
pivoted_data <- filtered_data %>%
tidyr::pivot_wider(names_from = analyte, values_from = result)
if (nrow(pivoted_data) == 0) {
warning("No data available for the given location.")
return(NULL)
}
# drop non-numeric columns
pd2 <- subset(pivoted_data, select = -c(sample.id, event.type))
# create scatter matrix using PerformanceAnalytics package
chart.Correlation(pd2,
histogram = T,
method = 'pearson',
pch = 8
)
return(NULL)
}
create_scatterplot_matrix(dat, loc)
create_scatterplot_matrix <- function(data, location_name) {
filtered_data <- data %>%
filter(location.name == location_name) %>%
mutate(sample.id = sub("-[1-5]$", "", sample.id),  # Remove "-1", "-2", "-3", "-4", "-5" from sample.id
sample.id = sub("-[1-5]-D$", "-D", sample.id)) %>%  # Replace "-1-D", "-2-D", "-3-D", "-4-D", "-5-D" with "-D"
select(sample.id, result, analyte, event.type)
# Pivot the data wider
pivoted_data <- filtered_data %>%
tidyr::pivot_wider(names_from = analyte, values_from = result)
if (nrow(pivoted_data) == 0) {
warning("No data available for the given location.")
return(NULL)
}
# drop non-numeric columns
pd2 <- subset(pivoted_data, select = -c(sample.id, event.type))
# create scatter matrix using PerformanceAnalytics package
chart.Correlation(pd2,
histogram = T,
method = 'pearson',
pch = 8
)
# pairs(pd2,
#       col = 'blue',
#       pch = 8,
#       main = 'Scatterplot Matrix of All Water Analytes'
#       )
return(NULL)
}
create_scatterplot_matrix(dat, loc)
version
# plotly Violin plot with dropdown
create_violin_plot <- function(df, selected_location) {
y_axis_var_names <- unique(df$analyte)
event_colors <- c("Inflow" = "#E69F00", "Outflow" = "#56B4E9", "Point Sample" = "#009E73")
create_buttons <- function(df, y_axis_var_name, selected_location) {
list(
method = 'restyle',
args = list('y', list(df[df$analyte == y_axis_var_name & df$location.name == selected_location, "result"])),
label = sprintf('Show %s', y_axis_var_name)
)
}
location_violin_plot <- plot_ly(df, x = ~event.type,
y = ~result,
color = ~event.type,
colors = event_colors,
type = 'violin', box = list(
visible = T
),
meanline = list(
visible = T
)) %>%
# Adding scatter points next to violin bars
add_trace(x = ~event.type, y = ~result, type = 'scatter', mode = 'markers', marker = list(size = 3, opacity = 0.6),
color = ~event.type, colors = event_colors, showlegend = FALSE, hoverinfo = 'y+text',
text = ~paste("Result: ", result, "<br>Event Type: ", event.type)) %>%
layout(
title = paste("Violin plots for Location:", selected_location),
xaxis = list(title = "Collected", tickformat = "%y-%m-%d"),
yaxis = list(title = "Result"),
showlegend = TRUE,
updatemenus = list(
list(
buttons = lapply(y_axis_var_names, create_buttons, df = df, selected_location = selected_location)
)
))
return(location_violin_plot)
}
create_violin_plot(dat, loc)
knit_with_parameters("~/GitHub/ALS-Data-Cleaning-Tool/Code/site_selector.Rmd")
here::here()
knit_with_parameters("~/GitHub/ALS-Data-Cleaning-Tool/Code/site_selector.Rmd")
library(dplyr)
library(ggplot2)
library(tidyr)
#library(GGally)
#library(plotly)
library(PerformanceAnalytics)
loc = 'AVRC STAR'
# Uploading file-merge code to create data frame
source('./Code/file-merger.R')
# create data frame
dat <- returnAllFiles(d = directory, export = FALSE)
# make columns lowercase so they are all the same case
colnames(dat) <- tolower(names(dat))
# Load required libraries
library(plotly)
# Function to create a scatter plot with dropdown
# Function to create a scatter plot with dropdown
# Function to create a scatter plot with dropdown
create_scatterplot <- function(df, selected_location) {
# Filter data to exclude analytes with no data
filtered_df <- df[df$location.name == selected_location, ]
analyte_counts <- table(filtered_df$analyte)
valid_analytes <- names(analyte_counts)[analyte_counts > 0]
filtered_df <- filtered_df[filtered_df$analyte %in% valid_analytes, ]
y_axis_var_names <- sort(unique(filtered_df$analyte))
# Specify event colors and types
event_colors <- c("Inflow" = "#E69F00", "Outflow" = "#56B4E9", "Point Sample" = "#009E73")
event_types <- c("Inflow", "Outflow", "Point Sample")
create_buttons <- function(y_axis_var_name) {
analyte_data <- filtered_df[filtered_df$analyte == y_axis_var_name, ]
y_data <- analyte_data$result
y_data <- y_data[!is.na(y_data)]  # Exclude NAs from y_data
if (length(y_data) == 0) {
return(NULL)  # Exclude analytes with no data from the dropdown
}
y_range <- range(y_data)
buffer_factor <- 0.1  # Set your desired buffer factor
y_range_with_buffer <- y_range + diff(y_range) * c(-buffer_factor, buffer_factor)
list(
method = 'restyle',
args = list('y', list(y_data)),
label = y_axis_var_name,
args2 = list('yaxis.range', y_range_with_buffer)  # Update y-axis range
)
}
# Create a scatter plot with the first analyte's data
first_analyte <- y_axis_var_names[1]
first_analyte_data <- filtered_df[filtered_df$analyte == first_analyte, ]
first_analyte_event_types <- unique(first_analyte_data$event.type)
location_scatter_plot <- plot_ly(data = first_analyte_data, x = ~collected, y = ~result,
color = ~event.type, colors = event_colors,
type = 'scatter', mode = 'markers',
marker = list(size = 8, opacity = 0.6),
legendgroup = ~event.type,
showlegend = TRUE) %>%
layout(
title = paste("Scatter plot for Location:", selected_location),
xaxis = list(title = "Collected", tickformat = "%m/%d/%y"),  # Format the date as MM/DD/YY
yaxis = list(title = "Result", rangeslider = list()),  # Add rangeslider
showlegend = TRUE,
updatemenus = list(
list(
buttons = lapply(y_axis_var_names, create_buttons)
)
)
)
return(location_scatter_plot)
}
create_scatterplot(dat, loc)
